buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

apply plugin: "java"
apply plugin: "com.google.protobuf"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'

repositories {
    mavenCentral()
}

dependencies {
    implementation deps.grpc_protobuf
    implementation deps.grpc_stub
    implementation deps.grpc_validate
}

def generatedSrcRoot = file("${buildDir}/generated/source/proto/main/java/")
sourceSets.main {
    proto {
        srcDir "${rootDir}/base-storage/proto/"
    }
    java {
        srcDirs = ["${generatedSrcRoot}"]
    }
}

compileJava {
    options.annotationProcessorGeneratedSourcesDirectory generatedSrcRoot
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpcProtobuf}"
        }
        javapgv {
            artifact = "io.envoyproxy.protoc-gen-validate:protoc-gen-validate:0.1.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            javapgv {
                option "lang=java"
            }
        }
    }
}

jar {
    baseName = 'base-storage'
    manifest {
        attributes('kin-storage': project.name,
                'Version': project.version)
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        release(MavenPublication) {
            artifact sourcesJar
            artifact jar

            pom {
                packaging 'jar'
                withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                    def depsNode = root["dependencies"][0] ?: root.appendNode("dependencies")
                    def addDep = {
                        if (it.group == null) return // Avoid empty dependency nodes

                        def dependencyNode = depsNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.hasProperty('optional') && it.optional) {
                            dependencyNode.appendNode('optional', 'true')
                        }
                        dependencyNode.appendNode("scope", "runtime")
                    }

                    configurations.implementation.dependencies.each addDep
                }
            }
        }
    }
    repositories {
        maven {
            url "s3://maven.kin/releases"
            credentials(AwsCredentials) {
                accessKey project.hasProperty('awsAccessKeyId') ? awsAccessKeyId : System.getenv('AWS_ACCESS_KEY_ID')
                secretKey project.hasProperty('awsSecretAccessKey') ? awsSecretAccessKey : System.getenv('AWS_SECRET_ACCESS_KEY')
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? bintrayKey : System.getenv('BINTRAY_API_KEY')
    publications = ['release']
    override = true

    pkg {
        repo = "kin-android"
        userOrg = "kinecosystem"
        name = "base-storage"
        desc = "Kin Android SDK Base Storage"
        websiteUrl = "https://github.com/kinecosystem/kin-android"
        vcsUrl = "https://github.com/kinecosystem/kin-android.git"
        licenses = ["MIT", "Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
    }
}
